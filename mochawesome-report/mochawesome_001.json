{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2023-04-06T14:09:42.967Z",
    "end": "2023-04-06T14:09:43.216Z",
    "duration": 249,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "80697b49-0aaa-46b7-b26b-4356475e19ff",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d3d4fcaf-2e18-482a-8171-3a8a51bd6d6c",
          "title": "Teste da Funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Teste da Funcionalidade Produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 55,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "829325e1-42ea-4f32-b65b-f05e91bd409c",
              "parentUUID": "d3d4fcaf-2e18-482a-8171-3a8a51bd6d6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Listar produtos",
              "fullTitle": "Teste da Funcionalidade Produtos Listar produtos",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'produtos'\n}).then(response => {\n  //expect(response.body.produtos[13].nome).to.equal('Logitech MX Vertical')\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(15);\n});",
              "err": {},
              "uuid": "5f764af5-470a-4dc6-b7b5-e3b518ee0f9c",
              "parentUUID": "d3d4fcaf-2e18-482a-8171-3a8a51bd6d6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastrar produto",
              "fullTitle": "Teste da Funcionalidade Produtos Cadastrar produto",
              "timedOut": null,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 1000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 100,\n    \"descricao\": \"Produto Novo\",\n    \"quantidade\": 500\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "d94b9999-5bb4-42fa-aac7-df20a08e5a30",
              "parentUUID": "d3d4fcaf-2e18-482a-8171-3a8a51bd6d6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar mensagem de erro ao tentar cadastrar produto com nome repetido",
              "fullTitle": "Teste da Funcionalidade Produtos Deve validar mensagem de erro ao tentar cadastrar produto com nome repetido",
              "timedOut": null,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, 'Produto EBAC Novo', 250, 'Descrição do produto novo', 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "717f0d54-94d3-4093-b287-76a8dfafec1f",
              "parentUUID": "d3d4fcaf-2e18-482a-8171-3a8a51bd6d6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado",
              "fullTitle": "Teste da Funcionalidade Produtos Deve editar um produto cadastrado",
              "timedOut": null,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  let produto = `Produto editado ${Math.floor(Math.random() * 1000000)}`;\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 100,\n      \"descricao\": \"Editado\",\n      \"quantidade\": 150\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal(\"Registro alterado com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "48600d7b-d2fc-49a5-9544-f7b257775fa0",
              "parentUUID": "d3d4fcaf-2e18-482a-8171-3a8a51bd6d6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado previamente",
              "fullTitle": "Teste da Funcionalidade Produtos Deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 1000000)}`;\ncy.cadastrarProduto(token, produto, 250, 'Descrição do produto novo', 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 100,\n      \"descricao\": \"Editado\",\n      \"quantidade\": 150\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal(\"Registro alterado com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "8cbcd1dd-5a4a-4c77-9a56-67b1fe571e63",
              "parentUUID": "d3d4fcaf-2e18-482a-8171-3a8a51bd6d6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto previamente cadastrado",
              "fullTitle": "Teste da Funcionalidade Produtos Deve deletar um produto previamente cadastrado",
              "timedOut": null,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 1000000)}`;\ncy.cadastrarProduto(token, produto, 250, 'Descrição do produto novo', 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "1dcd2015-516b-4056-a254-63b4aa613517",
              "parentUUID": "d3d4fcaf-2e18-482a-8171-3a8a51bd6d6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "829325e1-42ea-4f32-b65b-f05e91bd409c",
            "5f764af5-470a-4dc6-b7b5-e3b518ee0f9c",
            "d94b9999-5bb4-42fa-aac7-df20a08e5a30",
            "717f0d54-94d3-4093-b287-76a8dfafec1f",
            "48600d7b-d2fc-49a5-9544-f7b257775fa0",
            "8cbcd1dd-5a4a-4c77-9a56-67b1fe571e63",
            "1dcd2015-516b-4056-a254-63b4aa613517"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 227,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}